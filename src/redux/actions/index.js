import {
  CARDS, CHARTS, LOGGED_IN, RECEIVE_HOSTS, REQUEST_HOSTS, REQUEST_TOKEN, RECEIVE_TOKEN,
} from './actionsTypes';
import BASE_URL from './BASE_URL';

export const loggedInAction = (value) => ({ type: LOGGED_IN, value });

export const cardsAction = (value) => ({ type: CARDS, value });
export const chartsAction = (value) => ({ type: CHARTS, value });

const requestToken = () => ({ type: REQUEST_TOKEN });
const receiveToken = (token) => ({
  type: RECEIVE_TOKEN,
  token,
});

/**
* Token API requests.
* @typedef Token
* @param {{username: string, password: string}} user {username: '', password: ***}
* @return {Promise<String>} A promise to the token.
*/
export function fetchToken(user) {
  const URL = `${BASE_URL}/api-token-auth/`;

  return async (dispatch) => {
    dispatch(requestToken());
    const response = await fetch(URL, {
      method: 'post',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(user),
      redirect: 'follow',
    });
    const token = await response.json();
    return dispatch(receiveToken(token));
  };
}

const requestHosts = () => ({ type: REQUEST_HOSTS });
const receiveHosts = (value) => ({
  type: RECEIVE_HOSTS,
  value,
});

/**
* Hosts API requests.
* @param {string} token
* @return {Promise<Data>} Promise object with the data request.
*/
export function fetchHosts(token) {
  const URL = `${BASE_URL}/api/assets/`;
  return async (dispatch) => {
    dispatch(requestHosts());
    const response = await fetch(URL, {
      method: 'get',
      headers: {
        Authorization: `Token ${token}`,
      },
    });
    const hosts = await response.json();
    return dispatch(receiveHosts(hosts));
  };
}
