import * as _ from './actionsTypes';
import BASE_URL from './BASE_URL';

const requestCards = () => ({ type: _.REQUEST_CARDS });
const receiveCardsTotalHosts = (cardTotalHosts) => ({
  type: _.RECEIVE_CARDS_TOTAL_HOSTS,
  cardTotalHosts,
});
const receiveCardsTotalVulnerabilities = (cardTotalVulnerabilities) => ({
  type: _.RECEIVE_CARDS_TOTAL_VULNERABILITIES,
  cardTotalVulnerabilities,
});
const receiveCardsaverageRisk = (cardAverageRisk) => ({
  type: _.RECEIVE_CARDS_AVERAGE_RISK,
  cardAverageRisk,
});

const typeInvalid = () => ({ type: 'TYPE_INVALID' });

/**
* Card API requests.
* @summary Send object with the data request to the redux state.
* @param {string} token
* @param {string} cardType Accept cardTypes: 'total_hosts', 'total_vulnerabilities', 'average_risk'
*/
export default function fetchCards(token, cardType) {
  let URL = '';
  switch (cardType) {
    case 'total_hosts':
      URL = `${BASE_URL}/api/dashboard/cards/asset`;
      return async (dispatch) => {
        dispatch(requestCards());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const totalHosts = await response.json();
        return dispatch(receiveCardsTotalHosts(totalHosts));
      };
    case 'total_vulnerabilities':
      URL = `${BASE_URL}/api/dashboard/cards/vulnerability`;
      return async (dispatch) => {
        dispatch(requestCards());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const totalVulnerabilities = await response.json();
        return dispatch(receiveCardsTotalVulnerabilities(totalVulnerabilities));
      };
    case 'average_risk':
      URL = `${BASE_URL}/api/dashboard/cards/risk`;
      return async (dispatch) => {
        dispatch(requestCards());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const averageRisk = await response.json();
        return dispatch(receiveCardsaverageRisk(averageRisk));
      };
    default:
      return (dispatch) => dispatch(typeInvalid());
  }
}
