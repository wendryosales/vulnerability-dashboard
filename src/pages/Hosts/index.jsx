import React, { useEffect, useState } from 'react';
import { BsSortAlphaUp, BsSortNumericUp } from 'react-icons/bs';
import { useDispatch, useSelector } from 'react-redux';
import FilterHosts from '../../components/Filters/FilterHosts';
import Header from '../../components/Header';
import Pagination from '../../components/Pagination';
import Search from '../../components/Search';
import SideBar from '../../components/SideBar';
import TableItem from '../../components/TableItem';
import fetchHosts from '../../redux/actions/hosts';
import Style from './Hosts.module.css';

function Hosts() {
  const [data, setData] = useState([]);
  const [search, setSearch] = useState('');
  const [reverse, setReverse] = useState(false);
  const dispatch = useDispatch();

  const resultsOrigin = useSelector((state) => state.data.hosts.results);
  const { token } = useSelector((state) => state.login);
  const [currentPage, setCurrentPage] = useState(0);

  const itemsPerPage = 13;
  const pages = Math.ceil(data.length / itemsPerPage);
  const startIndex = currentPage * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentItems = data.slice(startIndex, endIndex);

  useEffect(() => {
    const filter = resultsOrigin.filter((element) => (
      element.hostname.toLowerCase().includes(search.toLowerCase())
    ));
    setData(filter);
  }, [search, resultsOrigin]);

  useEffect(() => {
    setData(resultsOrigin);
  }, []);

  const handleSort = ({ target }) => {
    switch (target.innerText) {
      case 'Nome':
        dispatch(fetchHosts(token, 'hostname'));
        setReverse((Pstate) => !Pstate);
        break;
      case 'Endereço de IP':
        dispatch(fetchHosts(token, 'ip_address'));
        setReverse((Pstate) => !Pstate);
        break;
      case 'Risco':
        dispatch(fetchHosts(token, 'risk'));
        setReverse((Pstate) => !Pstate);
        break;
      case 'Vulnerabilidades':
        dispatch(fetchHosts(token, 'vuln_count'));
        setReverse((Pstate) => !Pstate);
        break;
      default:
        break;
    }
  };

  const handleSearch = ({ target }) => {
    setSearch(target.value);
  };

  const sortReverse = () => {
    setData((Pvstate) => Pvstate.slice(0).reverse());
    setReverse((Pstate) => !Pstate);
  };

  return (
    <div className={Style.container}>
      <Header />
      <SideBar />
      <div className={Style.wrapper}>
        <section className={Style.table}>
          <div className={Style.filters}>
            <Search search={search} handleSearch={handleSearch} />
            <FilterHosts />
          </div>
          <table className="table table-striped table-inverse table-responsive">
            <thead className="thead-inverse">
              <tr>
                <th scope="col" value="name" type="name" onClick={reverse ? sortReverse : handleSort}>
                  Nome
                  <BsSortAlphaUp />
                </th>
                <th scope="col" name="ip" onClick={reverse ? sortReverse : handleSort}>
                  Endereço de IP
                  <BsSortAlphaUp />
                </th>
                <th scope="col" name="risk" onClick={reverse ? sortReverse : handleSort}>
                  Risco
                  <BsSortNumericUp />
                </th>
                <th scope="col" name="vuln_count" onClick={reverse ? sortReverse : handleSort}>
                  Vulnerabilidades
                  <BsSortNumericUp />
                </th>
              </tr>
            </thead>
            <tbody>
              {
                currentItems.map((element) => (
                  <TableItem element={element} key={element.id} />
                ))
              }
            </tbody>
          </table>
          <Pagination pages={pages} setCurrentPage={setCurrentPage} />
        </section>
      </div>
    </div>
  );
}

export default Hosts;
