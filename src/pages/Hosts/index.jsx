import React, { useEffect, useState } from 'react';
import { BsSortAlphaUp, BsSortNumericUp } from 'react-icons/bs';
import { useDispatch, useSelector } from 'react-redux';
import Header from '../../components/Header';
import SideBar from '../../components/SideBar';
import { fetchHosts } from '../../redux/actions';
import Style from './Hosts.module.css';

function Hosts() {
  const [data, setData] = useState([]);
  const [search, setSearch] = useState('');
  const dispatch = useDispatch();

  const resultsOrigin = useSelector((state) => state.data.hosts.results);
  const { token } = useSelector((state) => state.login);

  useEffect(() => {
    const filter = resultsOrigin.filter((element) => (
      element.hostname.toLowerCase().includes(search.toLowerCase())
    ));
    setData(filter);
  }, [search, resultsOrigin]);

  useEffect(() => {
    setData(resultsOrigin);
  }, []);

  const handleSortByName = () => {
    dispatch(fetchHosts(token, 'hostname'));
  };

  const handleSortByIp = () => {
    dispatch(fetchHosts(token, 'ip_address'));
  };
  const handleSortByRisk = () => {
    dispatch(fetchHosts(token, 'risk'));
  };
  const handleSortByVulnerability = () => {
    dispatch(fetchHosts(token, 'vuln_count'));
  };

  const handleSearch = ({ target }) => {
    setSearch(target.value);
  };
  return (
    <div className={Style.container}>
      <Header />
      <SideBar />
      <div className={Style.wrapper}>
        <section className={Style.table}>
          <div className={Style.search}>
            <label htmlFor="search">
              <input
                type="text"
                className={Style.formControl}
                name="search"
                id="search"
                value={search}
                placeholder="Pesquisar"
                onChange={handleSearch}
              />
            </label>
          </div>
          <table className="table table-striped table-inverse table-responsive">
            <thead className="thead-inverse">
              <tr>
                <th scope="col" value="name" onClick={handleSortByName}>
                  Nome
                  <BsSortAlphaUp />
                </th>
                <th scope="col" name="ip" onClick={handleSortByIp}>
                  Endere√ßo de IP
                  <BsSortAlphaUp />
                </th>
                <th scope="col" name="risk" onClick={handleSortByRisk}>
                  Risco
                  <BsSortNumericUp />
                </th>
                <th scope="col" name="vuln_count" onClick={handleSortByVulnerability}>
                  vulnerabilidades
                  <BsSortNumericUp />
                </th>
              </tr>
            </thead>
            <tbody>
              {
                data.slice(0, 15).map((element) => (
                  <tr key={element.id}>
                    <td>{element.hostname}</td>
                    <td>{element.ip_address}</td>
                    <td>{element.risk}</td>
                    <td>{element.vuln_count}</td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </section>
      </div>
    </div>
  );
}

export default Hosts;
