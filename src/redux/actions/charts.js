import * as _ from './actionsTypes';
import BASE_URL from './BASE_URL';

const requestCharts = () => ({ type: _.REQUEST_CHARTS });
const receiveChartsSeverity = (chartSeverity) => ({
  type: _.RECEIVE_CHARTS_SEVERITY,
  chartSeverity,
});
const receiveChartsTopAssets = (chartTopAssets) => ({
  type: _.RECEIVE_CHARTS_TOP_ASSETS,
  chartTopAssets,
});

const typeInvalid = () => ({ type: 'TYPE_INVALID' });

/**
* Chart API requests.
* @summary Send object with the data request to the redux state.
* @param {string} token
* @param {string} chartType Accept chartTypes: 'severity', 'top_assets'.
*/
export default function fetchCharts(token, chartType) {
  let URL = '';
  switch (chartType) {
    case 'severity':
      URL = `${BASE_URL}/api/dashboard/charts/severity`;
      return async (dispatch) => {
        dispatch(requestCharts());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const severity = await response.json();
        return dispatch(receiveChartsSeverity(severity));
      };
    case 'top_assets':
      URL = `${BASE_URL}/api/dashboard/charts/top-assets`;
      return async (dispatch) => {
        dispatch(requestCharts());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const charts = await response.json();
        return dispatch(receiveChartsTopAssets(charts));
      };
    default:
      return (dispatch) => dispatch(typeInvalid());
  }
}
