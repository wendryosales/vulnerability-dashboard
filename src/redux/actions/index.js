import * as _ from './actionsTypes';
import BASE_URL from './BASE_URL';

export const loggedInAction = (value) => ({ type: _.LOGGED_IN, value });
export const clearToken = () => ({ type: _.CLEAR_TOKEN, value: undefined });

const typeInvalid = () => ({ type: 'TYPE_INVALID' });

const requestToken = () => ({ type: _.REQUEST_TOKEN });
const receiveToken = (token) => ({
  type: _.RECEIVE_TOKEN,
  token,
});

/**
* Token API requests.
* @typedef Token
* @summary Send object with the data request to the redux state.
* @param {{username: string, password: string}} user {username: '', password: ***}
*/
export function fetchToken(user) {
  const URL = `${BASE_URL}/api-token-auth/`;

  return async (dispatch) => {
    dispatch(requestToken());
    const response = await fetch(URL, {
      method: 'post',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(user),
      redirect: 'follow',
    });
    const token = await response.json();
    return dispatch(receiveToken(token));
  };
}

const requestHosts = () => ({ type: _.REQUEST_HOSTS });
const receiveHosts = (hosts) => ({
  type: _.RECEIVE_HOSTS,
  hosts,
});

/**
* Hosts API requests. you can sort the results. Default: random.
* @param {string} token
* @summary Send object with the data request to the redux state.
* @param {string} order options: 'hostname', 'ip_address', 'vuln_count,
*/
export function fetchHosts(token, order) {
  const URL = `${BASE_URL}/api/assets/?ordering=${order}`;
  return async (dispatch) => {
    dispatch(requestHosts());
    const response = await fetch(URL, {
      method: 'get',
      headers: {
        Authorization: `Token ${token}`,
      },
    });
    const hosts = await response.json();
    return dispatch(receiveHosts(hosts));
  };
}

const requestCharts = () => ({ type: _.REQUEST_CHARTS });
const receiveChartsSeverity = (chartSeverity) => ({
  type: _.RECEIVE_CHARTS_SEVERITY,
  chartSeverity,
});
const receiveChartsTopAssets = (chartTopAssets) => ({
  type: _.RECEIVE_CHARTS_TOP_ASSETS,
  chartTopAssets,
});

/**
* Chart API requests.
* @summary Send object with the data request to the redux state.
* @param {string} token
* @param {string} chartType Accept chartTypes: 'severity', 'top_assets'.
*/
export function fetchCharts(token, chartType) {
  let URL = '';
  switch (chartType) {
    case 'severity':
      URL = `${BASE_URL}/api/dashboard/charts/severity`;
      return async (dispatch) => {
        dispatch(requestCharts());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const severity = await response.json();
        return dispatch(receiveChartsSeverity(severity));
      };
    case 'top_assets':
      URL = `${BASE_URL}/api/dashboard/charts/top-assets`;
      return async (dispatch) => {
        dispatch(requestCharts());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const charts = await response.json();
        return dispatch(receiveChartsTopAssets(charts));
      };
    default:
      return (dispatch) => dispatch(typeInvalid());
  }
}

const requestCards = () => ({ type: _.REQUEST_CARDS });
const receiveCardsTotalHosts = (cardTotalHosts) => ({
  type: _.RECEIVE_CARDS_TOTAL_HOSTS,
  cardTotalHosts,
});
const receiveCardsTotalVulnerabilities = (cardTotalVulnerabilities) => ({
  type: _.RECEIVE_CARDS_TOTAL_VULNERABILITIES,
  cardTotalVulnerabilities,
});
const receiveCardsaverageRisk = (cardAverageRisk) => ({
  type: _.RECEIVE_CARDS_AVERAGE_RISK,
  cardAverageRisk,
});

/**
* Card API requests.
* @summary Send object with the data request to the redux state.
* @param {string} token
* @param {string} cardType Accept cardTypes: 'total_hosts', 'total_vulnerabilities', 'average_risk'
*/
export function fetchCards(token, cardType) {
  let URL = '';
  switch (cardType) {
    case 'total_hosts':
      URL = `${BASE_URL}/api/dashboard/cards/asset`;
      return async (dispatch) => {
        dispatch(requestCards());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const totalHosts = await response.json();
        return dispatch(receiveCardsTotalHosts(totalHosts));
      };
    case 'total_vulnerabilities':
      URL = `${BASE_URL}/api/dashboard/cards/vulnerability`;
      return async (dispatch) => {
        dispatch(requestCards());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const totalVulnerabilities = await response.json();
        return dispatch(receiveCardsTotalVulnerabilities(totalVulnerabilities));
      };
    case 'average_risk':
      URL = `${BASE_URL}/api/dashboard/cards/risk`;
      return async (dispatch) => {
        dispatch(requestCards());
        const response = await fetch(URL, {
          method: 'get',
          headers: {
            Authorization: `Token ${token}`,
          },
        });
        const averageRisk = await response.json();
        return dispatch(receiveCardsaverageRisk(averageRisk));
      };
    default:
      return (dispatch) => dispatch(typeInvalid());
  }
}
