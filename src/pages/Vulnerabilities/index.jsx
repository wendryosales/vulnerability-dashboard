import React, { useEffect, useState } from 'react';
import { BsSortAlphaUp, BsSortNumericUp } from 'react-icons/bs';
import { GrFormNextLink, GrFormPreviousLink } from 'react-icons/gr';
import { useDispatch, useSelector } from 'react-redux';
import { useHistory } from 'react-router-dom';
import Header from '../../components/Header';
import Pagination from '../../components/Pagination';
import SideBar from '../../components/SideBar';
import fetchVulnerabilities from '../../redux/actions/vulnerabilities';
import Style from '../Hosts/Hosts.module.css';

function vulnerabilities() {
  const [data, setData] = useState([]);
  const [search, setSearch] = useState('');
  const [reverse, setReverse] = useState(false);
  const dispatch = useDispatch();
  const history = useHistory();

  const next = useSelector((state) => state.vulnerabilities.data.next);
  const previous = useSelector((state) => state.vulnerabilities.data.previous);
  const resultsOrigin = useSelector((state) => state.vulnerabilities.data.results);
  const { token } = useSelector((state) => state.login);

  useEffect(() => {
    const filter = resultsOrigin.filter((element) => (
      element.title.toLowerCase().includes(search.toLowerCase())
    ));
    setData(filter);
  }, [search, resultsOrigin]);

  useEffect(() => {
    setData(resultsOrigin);
  }, []);

  const handleSort = ({ target }) => {
    switch (target.innerText) {
      case 'Título':
        dispatch(fetchVulnerabilities(token, 'title'));
        setReverse((Pstate) => !Pstate);
        break;
      case 'Gravidade':
        dispatch(fetchVulnerabilities(token, 'severity'));
        setReverse((Pstate) => !Pstate);
        break;
      case 'cvss':
        dispatch(fetchVulnerabilities(token, 'cvss'));
        setReverse((Pstate) => !Pstate);
        break;
      case 'Data de publicação':
        dispatch(fetchVulnerabilities(token));
        setReverse((Pstate) => !Pstate);
        break;
      case 'Total de hosts afetados':
        dispatch(fetchVulnerabilities(token, 'asset_count'));
        setReverse((Pstate) => !Pstate);
        break;
      default:
        break;
    }
  };

  const handleSearch = ({ target }) => {
    setSearch(target.value);
  };

  const sortReverse = () => {
    setData((Pvstate) => Pvstate.slice(0).reverse());
    setReverse((Pstate) => !Pstate);
  };

  const handleClick = ({ target }) => {
    switch (target.name) {
      case 'next':
        dispatch(fetchVulnerabilities(token, false, next));
        break;
      case 'previous':
        dispatch(fetchVulnerabilities(token, false, previous));
        break;
      default:
        break;
    }
  };

  return (
    <div className={Style.container}>
      <Header />
      <SideBar />
      <div className={Style.wrapper}>
        <section className={Style.table}>
          <div className={Style.search}>
            <label htmlFor="search">
              <input
                type="text"
                className={Style.formControl}
                name="search"
                id="search"
                value={search}
                placeholder="Pesquisar"
                onChange={handleSearch}
              />
            </label>
          </div>
          <div className={Style.tableContainer}>
            <table>
              <thead>
                <tr>
                  <th scope="col" value="name" type="name" onClick={reverse ? sortReverse : handleSort}>
                    Título
                    <BsSortAlphaUp />
                  </th>
                  <th scope="col" name="ip" onClick={reverse ? sortReverse : handleSort}>
                    Gravidade
                    <BsSortAlphaUp />
                  </th>
                  <th scope="col" name="risk" onClick={reverse ? sortReverse : handleSort}>
                    cvss
                    <BsSortNumericUp />
                  </th>
                  <th scope="col" name="vuln_count" onClick={reverse ? sortReverse : handleSort}>
                    Data de publicação
                    <BsSortNumericUp />
                  </th>
                  <th scope="col" name="vuln_count" onClick={reverse ? sortReverse : handleSort}>
                    Total de hosts afetados
                    <BsSortNumericUp />
                  </th>
                </tr>
              </thead>
              <tbody>
                {
                data.map((element) => (
                  <tr key={element.id}>
                    <td>{element.title}</td>
                    <td>{element.severity}</td>
                    <td>{element.cvss}</td>
                    <td>{element.publication_date}</td>
                    <td>{element.asset_count}</td>
                  </tr>
                ))
              }
              </tbody>
            </table>
          </div>
          <div className={Style.pagination}>
            <button type="button" name="previous" onClick={handleClick}>previous</button>
            <button type="button" name="next" onClick={handleClick}>next</button>
          </div>
          {
            history.location.pathname === '/vulnerabilities' ? (
              <div className={Style.pagination}>
                <button
                  type="button"
                  name="previous"
                  onClick={handleClick}
                >
                  <GrFormPreviousLink />

                </button>
                <button
                  type="button"
                  name="next"
                  onClick={handleClick}
                >
                  <GrFormNextLink />
                </button>
              </div>
            ) : <Pagination pages={false} setCurrentPage={false} />
          }

        </section>
      </div>
    </div>
  );
}

export default vulnerabilities;
